/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr
    dup1
    __FUNC_SIG(balanceOf) eq balanceOfPath jumpi
    __FUNC_SIG(withdraw) eq withdrawPath jumpi

    callvalue 
     dup1 iszero finishExecution jumpi  //[callvalue]
    
    caller 0x00 mstore  //[callvalue]
    0x20 0x00 sha3 
    
    dup1 //[addresshash, addresshash, callvalue]
    sload dup1 iszero noPreviousBalancePath jumpi //[balance of address, addresshash, callvalue]
    swap1 //[addresshash, bal, callvalue]
    swap2 //[callvalue, bal, addresshash]
    add //[newbal, addresshash]
    swap1//[addresshash, newbal]
    0x00 //filler to pop     
    noPreviousBalancePath:
    pop // [addresshash, callvalue]
    sstore
    finishExecution:
    0x00 0x00 return

    balanceOfPath:
    0x04 calldataload 0x00 mstore
    0x20 0x00 sha3
    sload 
    0x00 mstore
    0x20 0x00 return

    withdrawPath:
    0x04 calldataload iszero finishExecution jumpi
    caller 0x00 mstore  //[]
    0x20 0x00 sha3 dup1 //[addresshash, addresshash]
    sload dup1 
    
    iszero revertPath jumpi //[balance of address, addresshash]
    //check for underflow
    dup1 //[bal, bal, hash]
    
    0x04 calldataload  //[ load, bal, bal, hash]
    swap1 
    dup2 //[load, bal, load, bal, hash]
    
    lt correctPath jumpi //check that balance is higher than calldataload amount    
    dup1 dup2 eq correctPath jumpi//else check that its equal
    //revert if neither is true
    0xABCDEF 0x00 mstore
    0x20 0x00 revert

    correctPath: //[load, bal, hash]
    
    swap1 //[bal, load, hash]
    sub //[newBal,  hash]
    swap1 sstore
    //prepare call
    0x00    //[byte size to copy ] 
    0x00    //[offset in mem, byte size to copy ] 
    0x00    //[argSize,offset in mem, byte size to copy]
    0x00    //[argOffset, argSize,offset in mem, byte size to copy]
    0x04 calldataload  //[value to send, argOffset, argSize,offset in mem, byte size to copy]      
    caller //[address, value to send, argOffset, argSize,offset in mem, byte size to copy]  
    gas     //[gas to send, address, value to send, argOffset, argSize,offset in mem, byte size to copy]
    call //[success of call]
    0x00 mstore
    0x20 0x00 return




    revertPath:
    0xCAFE
    0x00 mstore
    0x00 0x00 revert






}
